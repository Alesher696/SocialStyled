{"version":3,"file":"static/js/331.60af11d1.chunk.js","mappings":"2PAEaA,EAAc,SAACC,GAAD,OAAoBA,EAAMC,MAAMA,OAC9CC,EAAsB,SAACF,GAAD,OAAoBA,EAAMC,MAAME,eACtDC,EAAwB,SAACJ,GAAD,OAAoBA,EAAMC,MAAMI,iBACxDC,EAAiB,SAACN,GAAD,OAAoBA,EAAMC,MAAMM,UACjDC,EAAoB,SAACR,GAAD,OAAoBA,EAAMC,MAAMQ,a,UCgBpDC,EAAQ,WAEjBC,QAAQC,IAAI,sBAEZ,IAAML,GAAWM,EAAAA,EAAAA,GAAeP,GAC1BG,GAAcI,EAAAA,EAAAA,GAAeL,GAC7BH,GAAkBQ,EAAAA,EAAAA,GAAeT,GACjCH,GAAQY,EAAAA,EAAAA,GAAed,GACvBI,GAAgBU,EAAAA,EAAAA,GAAeX,GAC/BY,GAAWC,EAAAA,EAAAA,KAEXC,EAAqB,CAAC,SAAU,YACtC,EAAgCC,EAAAA,SAAe,IAA/C,eAAOC,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACNN,GAASO,EAAAA,EAAAA,IAAWZ,EAAaF,IACjCO,GAASQ,EAAAA,EAAAA,SACV,IAEH,IAKMC,EAAwB,SAACC,EAAgBC,GAEvCX,EADAW,GACSC,EAAAA,EAAAA,IAAeF,IAEfG,EAAAA,EAAAA,IAAaH,KASxBI,EAA6B,SAACJ,EAAgBK,GAChDf,GAASgB,EAAAA,EAAAA,IAAkBN,IAC3BV,GAASiB,EAAAA,EAAAA,IAAkBP,KAG/B,OACI,UAACQ,EAAD,YACI,4BACI,kBAAOC,SAbU,SAACC,GAC1BpB,GAASO,EAAAA,EAAAA,IAAWZ,EAAaF,EAAU2B,EAAEC,cAAcC,QAC3DjB,EAAYe,EAAEC,cAAcC,WAYpB,+CAER,yBACKnC,EAAMoC,KAAI,SAAAC,GAAE,OACT,UAACC,EAAD,WACKD,EAAGE,MACJ,kBACCF,EAAGG,IACJ,mBACIC,QAAS,kBAAMnB,EAAsBe,EAAGG,GAAIH,EAAGK,WADnD,SAC+DL,EAAGK,SAAW3B,EAAmB,GAAKA,EAAmB,MAExH,SAAC,KAAD,CAAS4B,GAAE,gCAA2BN,EAAGG,GAA9B,aACFC,QAAS,kBAAMd,EAA2BU,EAAGG,GAAIH,EAAGE,OAD7D,UAEI,oDATQF,EAAGG,UAavB,mBACA,SAACI,EAAD,CAAmBC,eAAgB,EAAGC,MAAO1C,EAAiB4B,SA7C3C,SAACe,GACxBlC,GAASmC,EAAAA,EAAAA,IAAiBD,IAC1BlC,GAASO,EAAAA,EAAAA,IAAW2B,EAAMzC,EAAUW,KA4CbgC,iBAAiB,KACpC,4BACI,mBACA,4CACC/C,EAAckC,KAAI,SAAAC,GAAE,OACjB,UAACC,EAAD,WACKD,EAAGE,MACJ,mBACIE,QAAS,kBAAMnB,EAAsBe,EAAGG,GAAIH,EAAGK,WADnD,SAC+DL,EAAGK,SAAW3B,EAAmB,GAAKA,EAAmB,MAExH,SAAC,KAAD,CAAS4B,GAAE,gCAA2BN,EAAGG,GAA9B,aACFC,QAAS,kBAAMd,EAA2BU,EAAGG,GAAIH,EAAGE,OAD7D,UAEI,oDAPQF,EAAGG,cAejCT,EAAemB,EAAAA,GAAAA,IAAH,qJASZZ,EAAYY,EAAAA,GAAAA,IAAH,0BAITN,GAAoBM,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH","sources":["common/utils/users-selectors.ts","common/components/users/Users.tsx"],"sourcesContent":["import {RootState} from \"app/store\";\r\n\r\nexport const selectUsers = (state:RootState)=> state.users.users\r\nexport const selectFollowedUsers = (state:RootState)=> state.users.followedUsers\r\nexport const selectTotalUsersCount = (state:RootState)=> state.users.totalUsersCount\r\nexport const selectPageSize = (state:RootState)=> state.users.pageSize\r\nexport const selectCurrentPage = (state:RootState)=> state.users.currentPage\r\nexport const selectIsFetching = (state:RootState)=> state.users.isFetching\r\nexport const selectFollowingInProgress = (state:RootState)=> state.users.followingInProgress","import React, {ChangeEvent, useEffect} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    followUserTC,\r\n    getFollowedUsersTC,\r\n    getUsersTC,\r\n    setCurrentPageAC,\r\n    unFollowUserTC\r\n} from \"redux/users-reducer\";\r\nimport {Pagination} from 'antd';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {getMessagesListTC, setActiveUserIdAC} from \"redux/dialogs-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"common/hooks/selectors\";\r\nimport {\r\n    selectCurrentPage,\r\n    selectFollowedUsers,\r\n    selectPageSize,\r\n    selectTotalUsersCount,\r\n    selectUsers\r\n} from \"common/utils/users-selectors\";\r\n\r\n\r\nexport const Users = () => {\r\n\r\n    console.log('users is rendered ')\r\n\r\n    const pageSize = useAppSelector(selectPageSize)\r\n    const currentPage = useAppSelector(selectCurrentPage)\r\n    const totalUsersCount = useAppSelector(selectTotalUsersCount)\r\n    const users = useAppSelector(selectUsers)\r\n    const followedUsers = useAppSelector(selectFollowedUsers)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const userFollowerStatus = ['follow', 'unfollow']\r\n    const [termUser, setTermUser] = React.useState('')\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize))\r\n        dispatch(getFollowedUsersTC())\r\n    }, [])\r\n\r\n    const onClickPageHandler = (page: number) => {\r\n        dispatch(setCurrentPageAC(page));\r\n        dispatch(getUsersTC(page, pageSize, termUser))\r\n    }\r\n\r\n    const followUnfollowHandler = (userId: number, status: boolean) => {\r\n        if (status) {\r\n            dispatch(unFollowUserTC(userId));\r\n        } else {\r\n            dispatch(followUserTC(userId));\r\n        }\r\n    }\r\n\r\n    const getSearchUserHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(getUsersTC(currentPage, pageSize, e.currentTarget.value))\r\n        setTermUser(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickActiveUserIdHandler = (userId: number, userName: string) => {\r\n        dispatch(setActiveUserIdAC(userId))\r\n        dispatch(getMessagesListTC(userId))\r\n    }\r\n\r\n    return (\r\n        <UsersWrapper>\r\n            <div>\r\n                <input onChange={getSearchUserHandler}/>\r\n                <button> search...</button>\r\n            </div>\r\n        <div>\r\n            {users.map(el =>\r\n                <UsersName key={el.id}>\r\n                    {el.name}\r\n                    <br/>\r\n                    {el.id}\r\n                    <button\r\n                        onClick={() => followUnfollowHandler(el.id, el.followed)}>{el.followed ? userFollowerStatus[1] : userFollowerStatus[0]}\r\n                    </button>\r\n                    <NavLink to={`/SocialStyled/dialogs/${el.id}/messages`}\r\n                             onClick={() => onClickActiveUserIdHandler(el.id, el.name)}>\r\n                        <button>Write a message</button>\r\n                    </NavLink>\r\n                </UsersName>)}\r\n        </div>\r\n            <br/>\r\n            <PaginationWrapper defaultCurrent={1} total={totalUsersCount} onChange={onClickPageHandler}\r\n                               showSizeChanger={false}></PaginationWrapper>\r\n            <div>\r\n                <br/>\r\n                <div>followedUsers:</div>\r\n                {followedUsers.map(el =>\r\n                    <UsersName key={el.id}>\r\n                        {el.name}\r\n                        <button\r\n                            onClick={() => followUnfollowHandler(el.id, el.followed)}>{el.followed ? userFollowerStatus[1] : userFollowerStatus[0]}\r\n                        </button>\r\n                        <NavLink to={`/SocialStyled/dialogs/${el.id}/messages`}\r\n                                 onClick={() => onClickActiveUserIdHandler(el.id, el.name)}>\r\n                            <button>Write a message</button>\r\n                        </NavLink>\r\n                    </UsersName>)}\r\n            </div>\r\n        </UsersWrapper>\r\n    );\r\n};\r\n\r\nconst UsersWrapper = styled.div`\r\n  display: flex;\r\n  color: white;\r\n  font-size: 24px;\r\n  margin: 3em auto;\r\n  flex-direction: column;\r\n  min-height: 720px;\r\n`\r\n\r\nconst UsersName = styled.div`\r\n\r\n`\r\n\r\nconst PaginationWrapper = styled(Pagination)`\r\n  .ant-pagination-item {\r\n    margin: 0;\r\n  }\r\n`\r\n"],"names":["selectUsers","state","users","selectFollowedUsers","followedUsers","selectTotalUsersCount","totalUsersCount","selectPageSize","pageSize","selectCurrentPage","currentPage","Users","console","log","useAppSelector","dispatch","useAppDispatch","userFollowerStatus","React","termUser","setTermUser","useEffect","getUsersTC","getFollowedUsersTC","followUnfollowHandler","userId","status","unFollowUserTC","followUserTC","onClickActiveUserIdHandler","userName","setActiveUserIdAC","getMessagesListTC","UsersWrapper","onChange","e","currentTarget","value","map","el","UsersName","name","id","onClick","followed","to","PaginationWrapper","defaultCurrent","total","page","setCurrentPageAC","showSizeChanger","styled","Pagination"],"sourceRoot":""}